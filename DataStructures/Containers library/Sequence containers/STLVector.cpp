//
// vector
//
// 배열과 유사하게 데이터를 순차적으로 저장하고, 인덱스를 통해 특정 위치의 원소에 접근할 수 있습니다.
//

#include <vector>

using namespace std;

int main()
{
    /**
     * 벡터의 선언 및 초기화
     */
    vector<int> v;               // 빈 벡터 선언

    vector<int> v1 = {1, 2, 3};  // 초기화 리스트 초기화
    vector<int> v2(5, 0);        // 크기가 5이고 모든 원소를 0로 초기화
    vector<int> v3(v1);          // 복사 초기화

    vector<vector<int>> v4(3, vector<int>(4, 0)); // 3x4 크기의 2차원 벡터 (모든 원소 0으로 초기화)

    // 초기화 리스트를 이용한 2차원 벡터 초기화
    vector<vector<int>> v5 = {                    
                              {1, 2, 3, 4},
                              {5, 6, 7, 8},
                              {9, 10, 11, 12}};

    /**
     * 벡터의 원소 변경
     */
    v1[2] = 10; // 인덱스 2의 원소를 10으로 수정 ([1, 2, 10, 4, 5])

    /**
     * 벡터의 삽입과 삭제
     */
    v1.push_back(4);         // 맨 뒤에 5 삽입 (1, 2, 3, 4)
    v1.pop_back();           // 맨 뒤의 원소 삭제 (1, 2, 3)
    
    v1.insert(v.begin(), 0); // 맨 앞에 0 삽입 (0, 1, 2, 3)
    v1.erase(v.begin());     // 맨 앞의 원소 삭제 (1, 2, 3)

    return 0;
}